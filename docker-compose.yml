version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:16-alpine
    container_name: pixel-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pixel_gamedev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - pixel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pixel_gamedev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Express API Gateway & Frontend Service
  express:
    build:
      context: .
      dockerfile: Dockerfile.express
      args:
        NODE_ENV: production
    container_name: pixel-express
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-pixel_gamedev}
      FLASK_URL: http://flask:5001
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY:-change-this-in-production}
      FORCE_DOCKER_EXECUTION: "true"
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "5000:5000"
    networks:
      - pixel-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: "1000:1000"

  # Flask Game Execution Service
  flask:
    build:
      context: ./backend
      dockerfile: Dockerfile.flask
      args:
        PYTHON_ENV: production
    container_name: pixel-flask
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      FLASK_PORT: 5001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-pixel_gamedev}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY:-change-this-in-production}
      FORCE_DOCKER_EXECUTION: "true"
      LOG_LEVEL: ${LOG_LEVEL:-info}
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    ports:
      - "5001:5001"
    networks:
      - pixel-network
    depends_on:
      express:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - game_temp:/tmp/game_sessions
    privileged: false
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE  # Needed for Docker container management
    user: "1000:1000"

networks:
  pixel-network:
    driver: bridge
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
    driver: local
  game_temp:
    driver: local