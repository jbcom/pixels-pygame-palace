# Production Flask Dockerfile for Game Execution Service
FROM python:3.11-alpine AS base

# Install security updates and system dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache \
    curl \
    dumb-init \
    docker-cli \
    postgresql-client \
    && rm -rf /var/cache/apk/*

# Create app user for security
RUN addgroup -g 1000 -S appgroup && \
    adduser -u 1000 -S appuser -G appgroup

# Install Python dependencies
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt

# Set working directory
WORKDIR /app

# Copy application code
COPY . .

# Generate config from shared TypeScript config
RUN python -c "
import sys, os
sys.path.insert(0, '/app')
from shared_config_generator import generate_python_config
config_content = generate_python_config()
with open('/app/config.py', 'w') as f:
    f.write(config_content)
"

# Create necessary directories and set permissions
RUN mkdir -p /app/logs /tmp/game_sessions && \
    chown -R appuser:appgroup /app /tmp && \
    chmod +x /app/entrypoint.sh

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5001/api/health || exit 1

# Expose port
EXPOSE 5001

# Start with dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--", "/app/entrypoint.sh"]
CMD ["python", "app.py"]