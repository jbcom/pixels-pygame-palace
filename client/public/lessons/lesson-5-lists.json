{
  "nodes": {
    "start": {
      "id": "start",
      "speaker": "Pixel",
      "text": "Level 5 - LISTS! Time to organize your data like a pro! ðŸ“‹",
      "followUp": "Think of lists as your game's inventory system - holding multiple items in one place!",
      "options": [
        {
          "text": "Show me how lists work!",
          "next": "createList"
        },
        {
          "text": "Like an inventory in RPGs?",
          "next": "inventoryAnalogy"
        }
      ]
    },
    "inventoryAnalogy": {
      "id": "inventoryAnalogy",
      "speaker": "Pixel",
      "text": "EXACTLY! Lists are perfect for inventories, high scores, enemy waves, bullet arrays... everything!",
      "followUp": "Any time you need to track multiple things of the same type, lists are your answer!",
      "options": [
        {
          "text": "Teach me list magic!",
          "next": "createList"
        }
      ]
    },
    "createList": {
      "id": "createList",
      "speaker": "Pixel",
      "text": "Creating a list is easy - just use square brackets and separate items with commas!",
      "codeExample": "# Empty list\ninventory = []\n\n# List with items\nweapons = ['sword', 'bow', 'staff']\n\n# Mixed types (Python is flexible!)\nplayer_stats = ['Hero', 100, 15.5, True]\n\n# Numbers list\nhigh_scores = [1000, 850, 720, 650, 500]",
      "followUp": "Lists can hold anything - strings, numbers, even other lists!",
      "options": [
        {
          "text": "How do I access items?",
          "next": "indexing"
        },
        {
          "text": "Can I change them?",
          "next": "modifyList"
        }
      ]
    },
    "indexing": {
      "id": "indexing",
      "speaker": "Pixel",
      "text": "Lists use index numbers starting at 0 - like array positions in games!",
      "codeExample": "inventory = ['potion', 'sword', 'shield', 'map']\n\n# Access items by index\nfirst_item = inventory[0]   # 'potion'\nsecond_item = inventory[1]  # 'sword'\nlast_item = inventory[-1]   # 'map' (negative counts from end!)\n\n# Check how many items\ncount = len(inventory)  # 4",
      "followUp": "Remember: First item is [0], not [1]! Classic programmer counting!",
      "options": [
        {
          "text": "What if I use a wrong index?",
          "next": "indexError"
        },
        {
          "text": "How do I add items?",
          "next": "addItems"
        }
      ]
    },
    "indexError": {
      "id": "indexError",
      "speaker": "Pixel",
      "text": "Using an invalid index causes an IndexError - like trying to equip slot 10 when you only have 5 slots!",
      "codeExample": "items = ['sword', 'shield']\n\n# This works\nprint(items[0])  # 'sword'\n\n# This crashes!\n# print(items[5])  # IndexError!\n\n# Safe way to check:\nif len(items) > 5:\n    print(items[5])\nelse:\n    print('No item in slot 5!')",
      "followUp": "Always check your list length or use try/except for safety!",
      "options": [
        {
          "text": "Show me how to add items safely",
          "next": "addItems"
        }
      ]
    },
    "modifyList": {
      "id": "modifyList",
      "speaker": "Pixel",
      "text": "Lists are mutable - you can change them anytime! Perfect for dynamic game states!",
      "codeExample": "inventory = ['sword', 'shield', 'potion']\n\n# Change an item\ninventory[0] = 'magic sword'  # Upgrade!\n\n# Swap items\ninventory[1], inventory[2] = inventory[2], inventory[1]\n\nprint(inventory)  # ['magic sword', 'potion', 'shield']",
      "followUp": "You can modify lists in-place, unlike strings which are immutable!",
      "options": [
        {
          "text": "How do I add new items?",
          "next": "addItems"
        }
      ]
    },
    "addItems": {
      "id": "addItems",
      "speaker": "Pixel",
      "text": "Multiple ways to add items - like picking up loot in a dungeon!",
      "codeExample": "inventory = ['sword']\n\n# Add one item at the end\ninventory.append('potion')\n\n# Add multiple items\ninventory.extend(['shield', 'map'])\n\n# Insert at specific position\ninventory.insert(1, 'armor')  # Insert at index 1\n\nprint(inventory)\n# ['sword', 'armor', 'potion', 'shield', 'map']",
      "followUp": "append() for single items, extend() for multiple, insert() for specific positions!",
      "options": [
        {
          "text": "How do I remove items?",
          "next": "removeItems"
        },
        {
          "text": "Can I search lists?",
          "next": "searchList"
        }
      ]
    },
    "removeItems": {
      "id": "removeItems",
      "speaker": "Pixel",
      "text": "Removing items is like using consumables - they disappear from your inventory!",
      "codeExample": "inventory = ['sword', 'potion', 'shield', 'potion', 'map']\n\n# Remove specific item (first occurrence)\ninventory.remove('potion')  # Removes first potion\n\n# Remove by index\ndel inventory[0]  # Removes first item\n\n# Remove and return last item\nlast_item = inventory.pop()  # Returns 'map'\n\n# Remove and return specific index\nitem = inventory.pop(1)  # Returns item at index 1\n\n# Clear everything\n# inventory.clear()  # Empty list!",
      "followUp": "remove() by value, pop() to get the item back, del to delete by index!",
      "options": [
        {
          "text": "What about searching?",
          "next": "searchList"
        }
      ]
    },
    "searchList": {
      "id": "searchList",
      "speaker": "Pixel",
      "text": "Searching lists is crucial for game logic - checking if player has an item!",
      "codeExample": "inventory = ['sword', 'shield', 'potion', 'map', 'potion']\n\n# Check if item exists\nif 'key' in inventory:\n    print('You can unlock the door!')\nelse:\n    print('You need a key!')\n\n# Count occurrences\npotion_count = inventory.count('potion')  # Returns 2\n\n# Find index of item\nif 'map' in inventory:\n    map_position = inventory.index('map')  # Returns 3\n    print(f'Map is in slot {map_position}')",
      "followUp": "'in' checks existence, count() counts occurrences, index() finds position!",
      "options": [
        {
          "text": "Can I sort lists?",
          "next": "sortList"
        },
        {
          "text": "Show me slicing!",
          "next": "slicing"
        }
      ]
    },
    "sortList": {
      "id": "sortList",
      "speaker": "Pixel",
      "text": "Sorting is perfect for leaderboards and organizing inventory!",
      "codeExample": "# High scores\nscores = [500, 1200, 300, 950, 750]\nscores.sort()  # Sorts in-place\nprint(scores)  # [300, 500, 750, 950, 1200]\n\n# Reverse order (highest first)\nscores.sort(reverse=True)\nprint(scores)  # [1200, 950, 750, 500, 300]\n\n# Sort without changing original\noriginal = [5, 2, 8, 1]\nsorted_copy = sorted(original)  # Returns new list\nprint(original)  # Still [5, 2, 8, 1]\nprint(sorted_copy)  # [1, 2, 5, 8]",
      "followUp": "sort() changes the list, sorted() returns a new sorted list!",
      "options": [
        {
          "text": "What's list slicing?",
          "next": "slicing"
        }
      ]
    },
    "slicing": {
      "id": "slicing",
      "speaker": "Pixel",
      "text": "Slicing lets you grab chunks of a list - like selecting multiple items at once!",
      "codeExample": "items = ['sword', 'shield', 'bow', 'arrow', 'potion', 'map']\n\n# Get first 3 items\nfirst_three = items[0:3]  # ['sword', 'shield', 'bow']\n# Or shorter:\nfirst_three = items[:3]   # Same result!\n\n# Get last 2 items\nlast_two = items[-2:]  # ['potion', 'map']\n\n# Get middle items\nmiddle = items[2:5]  # ['bow', 'arrow', 'potion']\n\n# Copy entire list\ncopy = items[:]  # Full copy!\n\n# Every other item\nevery_other = items[::2]  # ['sword', 'bow', 'potion']",
      "followUp": "[start:end:step] - super powerful for list manipulation!",
      "options": [
        {
          "text": "Can lists contain lists?",
          "next": "nestedLists"
        },
        {
          "text": "Show me list tricks!",
          "next": "listTricks"
        }
      ]
    },
    "nestedLists": {
      "id": "nestedLists",
      "speaker": "Pixel",
      "text": "Lists can contain other lists - perfect for game grids and 2D maps!",
      "codeExample": "# Game board (tic-tac-toe)\nboard = [\n    ['X', 'O', 'X'],\n    ['O', 'X', 'O'],\n    ['O', 'X', 'X']\n]\n\n# Access specific cell\ntop_left = board[0][0]  # 'X'\nmiddle = board[1][1]    # 'X'\n\n# Inventory with categories\ninventory = [\n    ['sword', 'dagger', 'bow'],      # Weapons\n    ['helmet', 'armor', 'boots'],    # Armor\n    ['potion', 'elixir', 'antidote'] # Consumables\n]\n\nweapons = inventory[0]\nfirst_weapon = inventory[0][0]  # 'sword'",
      "followUp": "Nested lists are the foundation of 2D game worlds!",
      "options": [
        {
          "text": "Show me cool list tricks!",
          "next": "listTricks"
        }
      ]
    },
    "listTricks": {
      "id": "listTricks",
      "speaker": "Pixel",
      "text": "Here are some pro list techniques for game development!",
      "codeExample": "# List comprehension - create lists fast!\nenemies_hp = [100 for _ in range(5)]  # [100, 100, 100, 100, 100]\n\n# Filter a list\nitems = ['sword', 'potion', 'key', 'potion', 'map']\npotions = [item for item in items if item == 'potion']\n\n# Transform a list\ndamages = [10, 20, 15, 25]\ndoubled = [d * 2 for d in damages]  # [20, 40, 30, 50]\n\n# Zip lists together\nnames = ['Hero', 'Mage', 'Rogue']\nlevels = [10, 8, 12]\ncharacters = list(zip(names, levels))\n# [('Hero', 10), ('Mage', 8), ('Rogue', 12)]",
      "followUp": "List comprehensions are Python's superpower for creating lists!",
      "options": [
        {
          "text": "Time to practice!",
          "next": "practiceChallenge"
        }
      ]
    },
    "practiceChallenge": {
      "id": "practiceChallenge",
      "speaker": "Pixel",
      "text": "Boss Challenge! Create an inventory management system!",
      "followUp": "Track items, add loot, use potions, check for keys, and display everything!",
      "codeExample": "# Inventory System Challenge\ninventory = ['sword', 'potion', 'potion']\nmax_size = 10\n\n# Add item if space\ndef add_item(item):\n    if len(inventory) < max_size:\n        inventory.append(item)\n        print(f'Added {item}')\n    else:\n        print('Inventory full!')\n\n# Use item\ndef use_item(item):\n    if item in inventory:\n        inventory.remove(item)\n        print(f'Used {item}')\n    else:\n        print(f'No {item} in inventory!')\n\n# Test it!\nadd_item('key')\nuse_item('potion')\nprint('Current inventory:', inventory)",
      "options": [
        {
          "text": "Lists are powerful!",
          "next": "lessonComplete"
        }
      ]
    },
    "lessonComplete": {
      "id": "lessonComplete",
      "speaker": "Pixel",
      "text": "ðŸŽŠ LEVEL 5 COMPLETE! You're now a List Master! ðŸ“œ",
      "followUp": "Lists are everywhere in games - inventories, enemies, tiles, scores... You've got the power now!",
      "action": "completeLesson",
      "actionParams": { "lesson": 5, "nextLesson": 6 },
      "options": [
        {
          "text": "Continue to Lesson 6 - Functions!",
          "action": "loadLesson",
          "actionParams": { "lesson": 6 }
        },
        {
          "text": "I'm ready to make games!",
          "action": "startGameMode"
        },
        {
          "text": "Back to lesson menu",
          "action": "openLessons"
        }
      ]
    }
  },
  "startNode": "start"
}