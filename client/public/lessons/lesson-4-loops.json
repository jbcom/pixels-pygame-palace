{
  "nodes": {
    "start": {
      "id": "start",
      "speaker": "Pixel",
      "text": "Level 4 - LOOPS! The secret to not repeating yourself a million times! 🔄",
      "followUp": "Imagine typing 'spawn enemy' 100 times... Nah! Let's make Python do the repetitive work!",
      "options": [
        {
          "text": "Show me the loop magic!",
          "next": "whileLoop"
        },
        {
          "text": "Why are loops important?",
          "next": "loopImportance"
        }
      ]
    },
    "loopImportance": {
      "id": "loopImportance",
      "speaker": "Pixel",
      "text": "Games are ALL about loops! The game loop runs 60 times per second, checking inputs, updating positions, drawing graphics!",
      "followUp": "Without loops, games couldn't exist! Let's master them!",
      "options": [
        {
          "text": "I'm convinced! Teach me!",
          "next": "whileLoop"
        }
      ]
    },
    "whileLoop": {
      "id": "whileLoop",
      "speaker": "Pixel",
      "text": "The 'while' loop keeps running as long as something is true - like 'while game is running'!",
      "codeExample": "health = 100\n\nwhile health > 0:\n    print(f'Still alive! HP: {health}')\n    health = health - 20\n    \nprint('Game Over!')",
      "followUp": "It checks the condition, runs the code, then checks again. Repeat until false!",
      "options": [
        {
          "text": "What if it never stops?",
          "next": "infiniteLoop"
        },
        {
          "text": "Show me more examples!",
          "next": "whileExamples"
        }
      ]
    },
    "infiniteLoop": {
      "id": "infiniteLoop",
      "speaker": "Pixel",
      "text": "Ah, the dreaded infinite loop! If the condition never becomes false, it runs FOREVER!",
      "codeExample": "# DON'T RUN THIS!\nwhile True:\n    print('This never stops!')\n    \n# Better - with an exit condition:\nrunning = True\nturns = 0\n\nwhile running:\n    turns += 1\n    print(f'Turn {turns}')\n    if turns >= 5:\n        running = False",
      "followUp": "Always make sure your loop has a way to end, or your game will freeze!",
      "options": [
        {
          "text": "How do I control loops better?",
          "next": "breakContinue"
        }
      ]
    },
    "whileExamples": {
      "id": "whileExamples",
      "speaker": "Pixel",
      "text": "Here's a mini game loop - collecting coins until you have enough!",
      "codeExample": "coins = 0\ngoal = 50\n\nwhile coins < goal:\n    print(f'Coins: {coins}/{goal}')\n    found = 10  # Found 10 coins!\n    coins += found\n    print(f'Found {found} coins!')\n    \nprint(f'Success! You collected {coins} coins!')",
      "followUp": "Perfect for any 'keep doing until' situation in games!",
      "options": [
        {
          "text": "What about counting specific times?",
          "next": "forLoop"
        }
      ]
    },
    "breakContinue": {
      "id": "breakContinue",
      "speaker": "Pixel",
      "text": "'break' and 'continue' give you superpowers over loops!",
      "codeExample": "# break - escape the loop immediately!\nlives = 3\nwhile True:\n    print(f'Lives: {lives}')\n    lives -= 1\n    if lives == 0:\n        print('No lives left!')\n        break  # Exit loop!\n        \n# continue - skip to next iteration\nfor num in range(1, 6):\n    if num == 3:\n        continue  # Skip 3!\n    print(num)  # Prints: 1, 2, 4, 5",
      "followUp": "'break' is the emergency exit, 'continue' is the skip button!",
      "options": [
        {
          "text": "Show me for loops!",
          "next": "forLoop"
        }
      ]
    },
    "forLoop": {
      "id": "forLoop",
      "speaker": "Pixel",
      "text": "The 'for' loop is perfect when you know how many times to repeat - like spawning 5 enemies!",
      "codeExample": "# Spawn exactly 5 enemies\nfor enemy_number in range(5):\n    print(f'Spawning enemy #{enemy_number + 1}')\n    \n# range(5) gives us: 0, 1, 2, 3, 4",
      "followUp": "The range() function is your best friend for counting!",
      "options": [
        {
          "text": "Tell me more about range!",
          "next": "rangeFunction"
        },
        {
          "text": "Can I loop through other things?",
          "next": "forIterables"
        }
      ]
    },
    "rangeFunction": {
      "id": "rangeFunction",
      "speaker": "Pixel",
      "text": "range() is super flexible! You can control start, stop, and step!",
      "codeExample": "# Count from 0 to 4\nfor i in range(5):\n    print(i)  # 0, 1, 2, 3, 4\n    \n# Count from 1 to 5\nfor i in range(1, 6):\n    print(i)  # 1, 2, 3, 4, 5\n    \n# Count by 2s\nfor i in range(0, 10, 2):\n    print(i)  # 0, 2, 4, 6, 8\n    \n# Count backwards!\nfor i in range(10, 0, -1):\n    print(f'Countdown: {i}')",
      "followUp": "range(start, stop, step) - remember, it NEVER includes the stop value!",
      "options": [
        {
          "text": "What else can I loop through?",
          "next": "forIterables"
        }
      ]
    },
    "forIterables": {
      "id": "forIterables",
      "speaker": "Pixel",
      "text": "You can loop through ANYTHING that's a collection - strings, lists, even dictionaries later!",
      "codeExample": "# Loop through a string\nword = 'PIXEL'\nfor letter in word:\n    print(f'Give me a {letter}!')\n    \n# Loop through a list (preview!)\ninventory = ['sword', 'shield', 'potion']\nfor item in inventory:\n    print(f'You have: {item}')\n    \n# Loop with index\nfor index, item in enumerate(inventory):\n    print(f'Slot {index + 1}: {item}')",
      "followUp": "For loops make it easy to process every item in a collection!",
      "options": [
        {
          "text": "Can I nest loops?",
          "next": "nestedLoops"
        },
        {
          "text": "Show me a game example!",
          "next": "gameExample"
        }
      ]
    },
    "nestedLoops": {
      "id": "nestedLoops",
      "speaker": "Pixel",
      "text": "Nested loops are loops inside loops - perfect for grids, like game boards!",
      "codeExample": "# Create a 3x3 grid\nfor row in range(3):\n    for col in range(3):\n        print(f'({row},{col})', end=' ')\n    print()  # New line after each row\n    \n# Output:\n# (0,0) (0,1) (0,2)\n# (1,0) (1,1) (1,2)\n# (2,0) (2,1) (2,2)",
      "followUp": "The inner loop runs completely for each iteration of the outer loop!",
      "options": [
        {
          "text": "That's perfect for tile-based games!",
          "next": "tileExample"
        }
      ]
    },
    "tileExample": {
      "id": "tileExample",
      "speaker": "Pixel",
      "text": "Exactly! Here's how you'd generate a game map!",
      "codeExample": "# Simple map generation\nimport random\n\nwidth = 5\nheight = 3\n\nfor y in range(height):\n    for x in range(width):\n        tile = random.choice(['🌲', '🌳', '⬜', '⬜', '⬜'])\n        print(tile, end='')\n    print()\n    \n# Creates random forest/grass map!",
      "followUp": "Nested loops are the foundation of 2D game worlds!",
      "options": [
        {
          "text": "Show me more game uses!",
          "next": "gameExample"
        }
      ]
    },
    "gameExample": {
      "id": "gameExample",
      "speaker": "Pixel",
      "text": "Let's build a complete battle system with loops!",
      "codeExample": "# Turn-based combat\nplayer_hp = 100\nenemy_hp = 150\nturn = 0\n\nwhile player_hp > 0 and enemy_hp > 0:\n    turn += 1\n    print(f'\\n--- Turn {turn} ---')\n    \n    # Player attacks\n    damage = 25\n    enemy_hp -= damage\n    print(f'You deal {damage} damage!')\n    \n    if enemy_hp <= 0:\n        print('Victory!')\n        break\n        \n    # Enemy attacks\n    damage = 15\n    player_hp -= damage\n    print(f'Enemy deals {damage} damage!')\n    \n    print(f'Your HP: {player_hp} | Enemy HP: {enemy_hp}')\n\nif player_hp <= 0:\n    print('Defeat...')",
      "followUp": "See how the loop handles the entire battle? That's the power of loops!",
      "options": [
        {
          "text": "Let me practice!",
          "next": "practiceChallenge"
        }
      ]
    },
    "practiceChallenge": {
      "id": "practiceChallenge",
      "speaker": "Pixel",
      "text": "Challenge time! Create a countdown timer for a bomb defusal mini-game!",
      "followUp": "Count from 10 to 1, then print 'BOOM!' or 'Defused!' based on a random chance.",
      "codeExample": "import random\nimport time\n\nprint('Defusing bomb...')\n\nfor seconds in range(10, 0, -1):\n    print(f'{seconds} seconds left!')\n    # time.sleep(1)  # Uncomment for real timing!\n    \n    # 30% chance to defuse each second\n    if random.randint(1, 100) <= 30:\n        print('💣 BOMB DEFUSED! 🎉')\n        break\nelse:\n    # This runs if loop completes without break\n    print('💥 BOOM! 💥')",
      "options": [
        {
          "text": "The for-else combo is clever!",
          "next": "forElse"
        },
        {
          "text": "I'm ready for the next lesson!",
          "next": "lessonComplete"
        }
      ]
    },
    "forElse": {
      "id": "forElse",
      "speaker": "Pixel",
      "text": "The else clause on loops is Python magic! It runs if the loop completes without breaking!",
      "codeExample": "# Search for an item\ninventory = ['sword', 'shield', 'potion']\nsearch = 'key'\n\nfor item in inventory:\n    if item == search:\n        print(f'Found {search}!')\n        break\nelse:\n    print(f'{search} not in inventory!')\n    \n# The else only runs if we never break!",
      "followUp": "Super useful for search operations in games!",
      "options": [
        {
          "text": "Python keeps surprising me!",
          "next": "lessonComplete"
        }
      ]
    },
    "lessonComplete": {
      "id": "lessonComplete",
      "speaker": "Pixel",
      "text": "🎊 LEVEL 4 COMPLETE! You've mastered the art of repetition! 🔁",
      "followUp": "Loops are the heartbeat of every game - now you can make things happen again and again!",
      "action": "completeLesson",
      "actionParams": { "lesson": 4, "nextLesson": 5 },
      "options": [
        {
          "text": "On to Lesson 5 - Lists & Collections!",
          "action": "loadLesson",
          "actionParams": { "lesson": 5 }
        },
        {
          "text": "I want to start building games!",
          "action": "startGameMode"
        },
        {
          "text": "Back to lesson menu",
          "action": "openLessons"
        }
      ]
    }
  },
  "startNode": "start"
}