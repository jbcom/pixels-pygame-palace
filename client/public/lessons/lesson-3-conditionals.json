{
  "nodes": {
    "start": {
      "id": "start",
      "speaker": "Pixel",
      "text": "Level 3 - Time to give your code a BRAIN! ðŸ§  We're learning how to make decisions!",
      "followUp": "You know how games react to what you do? That's what we're building today!",
      "options": [
        {
          "text": "Yes! Let's make smart code!",
          "next": "ifStatement"
        },
        {
          "text": "Wait, like the choices in games?",
          "next": "gameAnalogy"
        }
      ]
    },
    "gameAnalogy": {
      "id": "gameAnalogy",
      "speaker": "Pixel",
      "text": "Exactly! Like when your health hits zero and it's game over, or when you find a key and suddenly doors open!",
      "followUp": "Every single game moment is an IF-THEN decision. Ready to code your own?",
      "options": [
        {
          "text": "This is gonna be cool!",
          "next": "ifStatement"
        }
      ]
    },
    "ifStatement": {
      "id": "ifStatement",
      "speaker": "Pixel",
      "text": "So here's the magic word: 'if'! It's like asking Python a question and doing something based on the answer!",
      "codeExample": "player_health = 25\n\nif player_health < 30:\n    print('Warning: Low health!')\n    print('Find a health potion!')",
      "followUp": "Notice how the code after 'if' is pushed to the right? That's how Python knows what to do when it's true!",
      "options": [
        {
          "text": "But what happens when health is fine?",
          "next": "elseStatement"
        },
        {
          "text": "Why's the code all pushed over like that?",
          "next": "explainIndent"
        }
      ]
    },
    "explainIndent": {
      "id": "explainIndent",
      "speaker": "Pixel",
      "text": "Oh that's actually super important! The spaces show Python what's inside the 'if' and what's not!",
      "codeExample": "if player_has_key:\n    print('Opening door...')  # Inside the if\n    print('You enter the room!')  # Also inside!\nprint('Game continues...')  # Outside - always runs!",
      "followUp": "It's like... imagine the indented stuff is in a special box that only opens when the condition is true!",
      "options": [
        {
          "text": "Got it! So what about when it's false?",
          "next": "elseStatement"
        }
      ]
    },
    "elseStatement": {
      "id": "elseStatement",
      "speaker": "Pixel",
      "text": "That's where 'else' comes in! It's the backup plan when your 'if' condition isn't true!",
      "codeExample": "coins = 45\nitem_cost = 50\n\nif coins >= item_cost:\n    print('Purchase successful!')\n    coins = coins - item_cost\nelse:\n    print('Not enough coins!')\n    print('You need', item_cost - coins, 'more coins')",
      "followUp": "See? If you CAN afford it, buy it! Otherwise, tell them they're broke! Simple!",
      "options": [
        {
          "text": "What if I need like... five different options?",
          "next": "elifStatement"
        },
        {
          "text": "Ooh, I wanna try this!",
          "next": "tryCondition"
        }
      ]
    },
    "elifStatement": {
      "id": "elifStatement",
      "speaker": "Pixel",
      "text": "Boom! That's where 'elif' saves the day! It's short for 'else if' - perfect for multiple paths!",
      "codeExample": "score = 850\n\nif score >= 1000:\n    print('PERFECT! S-Rank!')\nelif score >= 800:\n    print('Great job! A-Rank!')\nelif score >= 600:\n    print('Good! B-Rank!')\nelif score >= 400:\n    print('Not bad! C-Rank!')\nelse:\n    print('Try again! D-Rank')",
      "followUp": "It checks from top to bottom and stops at the FIRST match - like falling through platforms until you hit one!",
      "options": [
        {
          "text": "Wait, what if two could be true?",
          "next": "multipleTrue"
        },
        {
          "text": "I need to see more of this!",
          "next": "moreExamples"
        }
      ]
    },
    "multipleTrue": {
      "id": "multipleTrue",
      "speaker": "Pixel",
      "text": "Great question! Only the FIRST match wins! Once Python finds a true condition, it's done checking!",
      "codeExample": "age = 15\n\nif age >= 10:  # True! Stop here!\n    print('You can play rated E10+ games')\nelif age >= 13:  # Also true, but we never check!\n    print('You can play Teen games')\nelif age >= 17:  # Never even looked at\n    print('You can play Mature games')",
      "followUp": "Want to check ALL conditions? Then you need separate 'if' statements instead!",
      "options": [
        {
          "text": "Yeah, show me how that works!",
          "next": "separateIfs"
        }
      ]
    },
    "separateIfs": {
      "id": "separateIfs",
      "speaker": "Pixel",
      "text": "Check this out - separate 'if's are like multiple checkpoints - you can trigger them ALL!",
      "codeExample": "# Multiple power-ups can be active!\nhas_speed_boost = True\nhas_shield = True\nhas_double_points = False\n\nif has_speed_boost:\n    print('Speed x2!')  # Yes!\n    \nif has_shield:\n    print('Protected!')  # Also yes!\n    \nif has_double_points:\n    print('Double points!')  # Nope",
      "followUp": "Perfect for when you can have multiple power-ups at once, right?",
      "options": [
        {
          "text": "Can I check two things in one if?",
          "next": "logicalOperators"
        }
      ]
    },
    "tryCondition": {
      "id": "tryCondition",
      "speaker": "Pixel",
      "text": "Time to code a battle! Here's the setup...",
      "followUp": "Your enemy has 50 HP, you hit for 30 damage. What should we check?",
      "options": [
        {
          "text": "Can I one-shot them?",
          "next": "trySuccess"
        },
        {
          "text": "Is it a boss fight?",
          "next": "tryLogic"
        }
      ]
    },
    "trySuccess": {
      "id": "trySuccess",
      "speaker": "Pixel",
      "text": "Smart! Always check for the instant win first!",
      "codeExample": "enemy_hp = 50\nattack_power = 30\n\nif enemy_hp <= attack_power:\n    print('One-shot victory!')\nelse:\n    hits_needed = enemy_hp // attack_power + 1\n    print(f'Need {hits_needed} hits to win!')",
      "followUp": "See? Your code just calculated combat outcomes! Ready for something even cooler?",
      "options": [
        {
          "text": "Hit me with the cool stuff!",
          "next": "logicalOperators"
        }
      ]
    },
    "tryLogic": {
      "id": "tryLogic",
      "speaker": "Pixel",
      "text": "Hmm, but the enemy only has 50 HP - that condition would never happen!",
      "codeExample": "enemy_hp = 50\n\n# Enemy has 50, so > 100 is always false!\nif enemy_hp > 100:\n    print('Boss battle!')  # This never runs!\n    \n# Try this instead:\nif enemy_hp > 75:\n    print('Strong enemy!')\nelif enemy_hp > 40:\n    print('Regular enemy!')  # This would run!\nelse:\n    print('Weak enemy!')",
      "followUp": "Gotta match your conditions to your actual values! Ready for the next level?",
      "options": [
        {
          "text": "Yeah, I see what went wrong!",
          "next": "logicalOperators"
        }
      ]
    },
    "moreExamples": {
      "id": "moreExamples",
      "speaker": "Pixel",
      "text": "Check out this game menu - it's all conditionals!",
      "codeExample": "menu_choice = 2\n\nif menu_choice == 1:\n    print('Starting new game...')\n    print('Welcome to the adventure!')\nelif menu_choice == 2:\n    print('Loading saved game...')\n    print('Welcome back, hero!')\nelif menu_choice == 3:\n    print('Opening settings...')\nelse:\n    print('Invalid choice! Try again.')",
      "followUp": "Every menu in every game works like this! But what if we need to check TWO things?",
      "options": [
        {
          "text": "Yeah! Like having a key AND being level 10?",
          "next": "logicalOperators"
        }
      ]
    },
    "logicalOperators": {
      "id": "logicalOperators",
      "speaker": "Pixel",
      "text": "YES! That's exactly it! We use 'and', 'or', and 'not' - they're like logic glue!",
      "codeExample": "# AND - both gotta be true\nhas_key = True\ndoor_unlocked = False\n\nif has_key and not door_unlocked:\n    print('Use key to unlock door!')\n\n# OR - just need one\nhealth = 15\nhas_potion = True\n\nif health < 20 or has_potion:\n    print('Healing available!')",
      "followUp": "'and' = both, 'or' = either one, 'not' = opposite. It's that simple!",
      "options": [
        {
          "text": "Show me something really complex!",
          "next": "complexConditions"
        },
        {
          "text": "Can I put ifs inside other ifs?",
          "next": "nestedIfs"
        }
      ]
    },
    "complexConditions": {
      "id": "complexConditions",
      "speaker": "Pixel",
      "text": "Alright, let's go all out - here's a real combat AI!",
      "codeExample": "player_hp = 45\nenemy_hp = 80\nmana = 20\nhas_sword = True\nhas_magic = True\n\nif enemy_hp > 50 and player_hp < 30:\n    if mana >= 30 and has_magic:\n        print('Cast healing spell!')\n    elif has_sword:\n        print('Defensive stance!')\n    else:\n        print('Retreat!')\nelif enemy_hp <= 50 and player_hp > 30:\n    print('All-out attack!')\nelse:\n    print('Balanced approach!')",
      "followUp": "That's actual game AI logic right there! See the ifs inside ifs?",
      "options": [
        {
          "text": "Whoa, ifs inside ifs! Tell me more!",
          "next": "nestedIfs"
        }
      ]
    },
    "nestedIfs": {
      "id": "nestedIfs",
      "speaker": "Pixel",
      "text": "Exactly! You can put ifs inside ifs - like opening a door to find another door!",
      "codeExample": "inventory_slots = 10\nitems_count = 8\nis_premium = True\n\nif items_count < inventory_slots:\n    print('Space available!')\n    if is_premium:\n        print('Premium bonus: +2 extra slots!')\n        inventory_slots += 2\nelse:\n    print('Inventory full!')\n    if is_premium:\n        print('Premium feature: Auto-organize!')",
      "followUp": "The inside if only happens if the outside if is true first. Like unlocking levels in a game!",
      "options": [
        {
          "text": "I'm ready for the final challenge!",
          "next": "finalChallenge"
        }
      ]
    },
    "finalChallenge": {
      "id": "finalChallenge",
      "speaker": "Pixel",
      "text": "BOSS CHALLENGE TIME! Let's build a treasure chest system!",
      "followUp": "Here's the deal: You need a key OR lockpicks to open it. High level players always get rare loot!",
      "codeExample": "has_key = False\nhas_lockpicks = True\nplayer_level = 12\nimport random\nluck = random.randint(1, 100)\n\n# Your code here!\nif has_key or has_lockpicks:\n    print('Opening chest...')\n    if player_level > 10:\n        print('Rare item found!')\n    elif luck > 50:\n        print('Common item found!')\n    else:\n        print('Chest was empty!')\nelse:\n    print('Cannot open chest!')",
      "options": [
        {
          "text": "I understand conditionals now!",
          "next": "lessonComplete"
        }
      ]
    },
    "lessonComplete": {
      "id": "lessonComplete",
      "speaker": "Pixel",
      "text": "ðŸŽŠ LEVEL 3 COMPLETE! Your code can now think and make decisions! ðŸ¤–",
      "followUp": "You've mastered the foundation of game logic! Every game mechanic uses these concepts!",
      "action": "completeLesson",
      "actionParams": { "lesson": 3, "nextLesson": 4 },
      "options": [
        {
          "text": "Continue to Lesson 4 - Loops & Repetition!",
          "action": "loadLesson",
          "actionParams": { "lesson": 4 }
        },
        {
          "text": "I'm ready to make a game!",
          "action": "startGameMode"
        },
        {
          "text": "Back to lesson menu",
          "action": "openLessons"
        }
      ]
    }
  },
  "startNode": "start"
}