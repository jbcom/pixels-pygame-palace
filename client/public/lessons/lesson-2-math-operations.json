{
  "nodes": {
    "start": {
      "id": "start",
      "speaker": "Pixel",
      "text": "Welcome to Level 2! Time to turn Python into your personal calculator! 🔢",
      "followUp": "Every game needs math - from calculating damage to keeping score. Let's master the numbers!",
      "options": [
        {
          "text": "I'm ready for math magic!",
          "next": "basicMath"
        },
        {
          "text": "Will this help me make games?",
          "next": "mathImportance"
        }
      ]
    },
    "mathImportance": {
      "id": "mathImportance",
      "speaker": "Pixel",
      "text": "Absolutely! Think about it - health points, damage calculations, physics, scoring... it's ALL math!",
      "followUp": "Even moving a character on screen is just changing X and Y numbers. Math powers everything!",
      "options": [
        {
          "text": "That makes sense! Let's learn!",
          "next": "basicMath"
        }
      ]
    },
    "basicMath": {
      "id": "basicMath",
      "speaker": "Pixel",
      "text": "Python knows all the basic math operations! Let's start with the fab four!",
      "codeExample": "# Addition\nhealth = 100 + 20  # Result: 120\n\n# Subtraction  \ndamage = 100 - 35  # Result: 65\n\n# Multiplication\nscore = 10 * 5    # Result: 50\n\n# Division\nshare = 100 / 4   # Result: 25.0",
      "followUp": "See? It's just like regular math, but now the computer does the work!",
      "options": [
        {
          "text": "Let me try: damage = 50 - 15",
          "next": "trySubtraction"
        },
        {
          "text": "Let me try: points = 25 * 4",
          "next": "tryMultiplication"
        }
      ]
    },
    "trySubtraction": {
      "id": "trySubtraction",
      "speaker": "Pixel",
      "text": "Perfect! You calculated 35 damage remaining! Great for combat systems!",
      "codeExample": "enemy_health = 50\nplayer_damage = 15\nremaining_health = enemy_health - player_damage\nprint('Enemy health:', remaining_health)  # Result: 35",
      "followUp": "You can use variables in math too - super useful for dynamic calculations!",
      "options": [
        {
          "text": "What about more complex math?",
          "next": "complexMath"
        },
        {
          "text": "Show me division tricks",
          "next": "divisionTypes"
        }
      ]
    },
    "tryMultiplication": {
      "id": "tryMultiplication",
      "speaker": "Pixel",
      "text": "Excellent! 100 points scored! Multiplication is perfect for combos and bonuses!",
      "codeExample": "base_points = 25\nmultiplier = 4\ntotal_score = base_points * multiplier\nprint('Score with 4x combo:', total_score)  # Result: 100",
      "followUp": "Imagine using this for power-ups that double or triple your score!",
      "options": [
        {
          "text": "Can I chain operations together?",
          "next": "complexMath"
        },
        {
          "text": "What about division?",
          "next": "divisionTypes"
        }
      ]
    },
    "divisionTypes": {
      "id": "divisionTypes",
      "speaker": "Pixel",
      "text": "Division has two flavors in Python - regular and integer division!",
      "codeExample": "# Regular division (gives decimals)\nloot = 10 / 3   # Result: 3.333...\n\n# Integer division (whole numbers only)\nloot = 10 // 3  # Result: 3\n\n# Modulo (remainder)\nleftover = 10 % 3  # Result: 1",
      "followUp": "The // is great for 'how many whole items can each player get?' and % for 'what's left over?'",
      "options": [
        {
          "text": "When would I use modulo?",
          "next": "moduloExamples"
        },
        {
          "text": "Show me more operators",
          "next": "moreOperators"
        }
      ]
    },
    "moduloExamples": {
      "id": "moduloExamples",
      "speaker": "Pixel",
      "text": "Modulo is SUPER useful in games! Check out these examples!",
      "codeExample": "# Check if a number is even or odd\nlevel = 7\nif level % 2 == 0:\n    print('Even level - spawn bonus!')\nelse:\n    print('Odd level - normal enemies')\n\n# Cycling through options (0,1,2,0,1,2...)\nframe = 100\nanimation_frame = frame % 3  # Always 0, 1, or 2",
      "followUp": "It's perfect for creating patterns, animations, and checking divisibility!",
      "options": [
        {
          "text": "That's clever!",
          "next": "moreOperators"
        }
      ]
    },
    "complexMath": {
      "id": "complexMath",
      "speaker": "Pixel",
      "text": "You can combine operations to create complex formulas - just like damage calculations in RPGs!",
      "codeExample": "# Complex damage formula\nbase_attack = 50\nweapon_bonus = 20\ncritical_multiplier = 2\ndefense = 15\n\ndamage = (base_attack + weapon_bonus) * critical_multiplier - defense\nprint('Critical hit damage:', damage)  # Result: 125",
      "followUp": "Use parentheses to control what happens first - just like in math class!",
      "options": [
        {
          "text": "What's the order of operations?",
          "next": "orderOperations"
        },
        {
          "text": "Show me power operations",
          "next": "moreOperators"
        }
      ]
    },
    "orderOperations": {
      "id": "orderOperations",
      "speaker": "Pixel",
      "text": "Python follows PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction!",
      "codeExample": "# Without parentheses\nresult = 10 + 5 * 2  # Result: 20 (5*2 first, then +10)\n\n# With parentheses\nresult = (10 + 5) * 2  # Result: 30 (10+5 first, then *2)\n\n# Complex example\nscore = 100 + 50 * 2 - 10  # Result: 190\nscore = (100 + 50) * 2 - 10  # Result: 290",
      "followUp": "Parentheses are your friends - use them to make your intentions clear!",
      "options": [
        {
          "text": "Got it! What else can Python calculate?",
          "next": "moreOperators"
        }
      ]
    },
    "moreOperators": {
      "id": "moreOperators",
      "speaker": "Pixel",
      "text": "Python has some special power-up operators too! Check these out!",
      "codeExample": "# Power (exponents)\npower_level = 2 ** 10  # Result: 1024\n\n# Compound operators (shortcuts!)\nscore = 100\nscore += 50  # Same as: score = score + 50\nscore *= 2   # Same as: score = score * 2\nscore -= 25  # Same as: score = score - 25\nprint(score)  # Result: 275",
      "followUp": "The compound operators are super handy for updating game values quickly!",
      "options": [
        {
          "text": "Can I round numbers?",
          "next": "roundingNumbers"
        },
        {
          "text": "What about comparing numbers?",
          "next": "comparisons"
        }
      ]
    },
    "roundingNumbers": {
      "id": "roundingNumbers",
      "speaker": "Pixel",
      "text": "Yes! Python has built-in functions for rounding and more!",
      "codeExample": "health = 85.7\n\n# Round to nearest integer\nrounded = round(health)  # Result: 86\n\n# Round to 1 decimal place\nrounded = round(health, 1)  # Result: 85.7\n\n# Always round down\nimport math\nfloor_value = math.floor(health)  # Result: 85\n\n# Always round up\nceil_value = math.ceil(health)  # Result: 86",
      "followUp": "Perfect for health bars, scores, and any place you need clean numbers!",
      "options": [
        {
          "text": "What about comparing values?",
          "next": "comparisons"
        }
      ]
    },
    "comparisons": {
      "id": "comparisons",
      "speaker": "Pixel",
      "text": "Comparisons are huge in games! They help make decisions - like 'is the player dead?'",
      "codeExample": "player_health = 75\nenemy_health = 50\n\n# Greater than\nplayer_winning = player_health > enemy_health  # True\n\n# Less than or equal\ngame_over = player_health <= 0  # False\n\n# Equal to\nperfect_score = score == 100  # Check if exactly 100\n\n# Not equal\nhas_moved = new_position != old_position",
      "followUp": "These return True or False - perfect for making game decisions! We'll use these a lot in the next lesson!",
      "options": [
        {
          "text": "This is getting interesting!",
          "next": "practiceTime"
        }
      ]
    },
    "practiceTime": {
      "id": "practiceTime",
      "speaker": "Pixel",
      "text": "Let's put it all together! Time for a mini game calculation challenge!",
      "followUp": "Calculate the final score: Base points (100) + Combo bonus (50) × Multiplier (3) - Time penalty (25)",
      "options": [
        {
          "text": "final_score = 100 + 50 * 3 - 25",
          "next": "practiceCorrect"
        },
        {
          "text": "final_score = (100 + 50) * 3 - 25",
          "next": "practiceAlternative"
        }
      ]
    },
    "practiceCorrect": {
      "id": "practiceCorrect",
      "speaker": "Pixel",
      "text": "Excellent! You got 225 points! Your order of operations is perfect!",
      "codeExample": "base = 100\ncombo_bonus = 50\nmultiplier = 3\ntime_penalty = 25\n\nfinal_score = base + combo_bonus * multiplier - time_penalty\nprint('Final Score:', final_score)  # Result: 225",
      "followUp": "See how the multiplication happens first, then addition and subtraction? You're a natural!",
      "options": [
        {
          "text": "I'm ready for the next challenge!",
          "next": "advancedChallenge"
        }
      ]
    },
    "practiceAlternative": {
      "id": "practiceAlternative",
      "speaker": "Pixel",
      "text": "That gives 425 - a different result! You added base and bonus first, THEN multiplied!",
      "codeExample": "# Your way:\nfinal_score = (100 + 50) * 3 - 25  # Result: 425\n\n# Original intention:\nfinal_score = 100 + 50 * 3 - 25  # Result: 225",
      "followUp": "Both are valid calculations - it depends what you want! Parentheses change everything!",
      "options": [
        {
          "text": "Order of operations is important!",
          "next": "advancedChallenge"
        }
      ]
    },
    "advancedChallenge": {
      "id": "advancedChallenge",
      "speaker": "Pixel",
      "text": "Final boss challenge! Create a health potion formula!",
      "followUp": "The potion restores 25% of max health, plus 10 bonus points, but caps at max health (100).",
      "codeExample": "current_health = 60\nmax_health = 100\n\n# Calculate healing\nhealing = max_health * 0.25 + 10  # 25% + 10\nnew_health = current_health + healing\n\n# Cap at max health\nif new_health > max_health:\n    new_health = max_health\n    \nprint('Healed to:', new_health)",
      "options": [
        {
          "text": "I see how math drives game logic!",
          "next": "lessonComplete"
        }
      ]
    },
    "lessonComplete": {
      "id": "lessonComplete",
      "speaker": "Pixel",
      "text": "🎊 LEVEL 2 COMPLETE! You're now a Math Wizard! 🧙‍♂️",
      "followUp": "You can calculate damage, scores, physics - anything your game needs! Ready for the next power-up?",
      "action": "completeLesson",
      "actionParams": { "lesson": 2, "nextLesson": 3 },
      "options": [
        {
          "text": "On to Lesson 3 - Conditionals & Decisions!",
          "action": "loadLesson",
          "actionParams": { "lesson": 3 }
        },
        {
          "text": "I want to start making a game now!",
          "action": "startGameMode"
        },
        {
          "text": "Back to lesson menu",
          "action": "openLessons"
        }
      ]
    }
  },
  "startNode": "start"
}