{
  "nodes": {
    "start": {
      "id": "start",
      "speaker": "Pixel",
      "text": "Level 7 - DICTIONARIES! The ultimate data organizer! 📚",
      "followUp": "Think of dictionaries as labeled treasure chests - every item has a name tag!",
      "options": [
        {
          "text": "Show me dictionary magic!",
          "next": "createDict"
        },
        {
          "text": "How are they different from lists?",
          "next": "dictVsList"
        }
      ]
    },
    "dictVsList": {
      "id": "dictVsList",
      "speaker": "Pixel",
      "text": "Lists use numbers (0, 1, 2...), dictionaries use names (health, mana, strength)!",
      "codeExample": "# List - access by index\nstats_list = [100, 50, 25]\nhealth = stats_list[0]  # Which one is health again?\n\n# Dictionary - access by name\nstats_dict = {'health': 100, 'mana': 50, 'armor': 25}\nhealth = stats_dict['health']  # Crystal clear!",
      "followUp": "Dictionaries make your code readable - no more guessing what index means what!",
      "options": [
        {
          "text": "That's so much clearer!",
          "next": "createDict"
        }
      ]
    },
    "createDict": {
      "id": "createDict",
      "speaker": "Pixel",
      "text": "Creating dictionaries is easy - use curly braces and key:value pairs!",
      "codeExample": "# Empty dictionary\ninventory = {}\n\n# Character stats dictionary\nplayer = {\n    'name': 'Hero',\n    'level': 1,\n    'health': 100,\n    'mana': 50,\n    'experience': 0\n}\n\n# Item dictionary\nsword = {\n    'name': 'Iron Sword',\n    'damage': 15,\n    'durability': 100,\n    'value': 50\n}",
      "followUp": "Each key points to a value - like variable names for each piece of data!",
      "options": [
        {
          "text": "How do I access values?",
          "next": "accessDict"
        },
        {
          "text": "Can I change values?",
          "next": "modifyDict"
        }
      ]
    },
    "accessDict": {
      "id": "accessDict",
      "speaker": "Pixel",
      "text": "Access values using keys - like looking up stats on a character sheet!",
      "codeExample": "player = {\n    'name': 'Shadow Knight',\n    'level': 5,\n    'health': 150,\n    'skills': ['slash', 'block', 'charge']\n}\n\n# Access with brackets\nname = player['name']  # 'Shadow Knight'\nlevel = player['level']  # 5\n\n# Access with get() - safer!\nmana = player.get('mana', 0)  # Returns 0 if no mana key\n\n# Access nested data\nfirst_skill = player['skills'][0]  # 'slash'",
      "followUp": "Use get() to avoid errors when a key might not exist!",
      "options": [
        {
          "text": "How do I add or change values?",
          "next": "modifyDict"
        }
      ]
    },
    "modifyDict": {
      "id": "modifyDict",
      "speaker": "Pixel",
      "text": "Dictionaries are mutable - perfect for tracking changing game states!",
      "codeExample": "player = {'name': 'Hero', 'level': 1, 'exp': 0}\n\n# Change existing value\nplayer['level'] = 2  # Level up!\n\n# Add new key-value pair\nplayer['class'] = 'Warrior'  # New attribute!\nplayer['gold'] = 100\n\n# Update multiple values at once\nplayer.update({\n    'health': 150,\n    'mana': 75,\n    'strength': 20\n})\n\nprint(player)  # See all the changes!",
      "followUp": "Dictionaries grow with your game - add new attributes anytime!",
      "options": [
        {
          "text": "Can I remove keys?",
          "next": "removeKeys"
        },
        {
          "text": "Show me dictionary methods!",
          "next": "dictMethods"
        }
      ]
    },
    "removeKeys": {
      "id": "removeKeys",
      "speaker": "Pixel",
      "text": "Remove keys when they're no longer needed - like using consumable items!",
      "codeExample": "inventory = {\n    'potion': 3,\n    'elixir': 1,\n    'bomb': 5,\n    'key': 1\n}\n\n# Remove with del\ndel inventory['key']  # Used the key!\n\n# Remove and get the value\nelixirs = inventory.pop('elixir')  # Returns 1\nprint(f'Used {elixirs} elixir(s)')\n\n# Remove if exists (safe)\ninventory.pop('sword', None)  # No error if no sword\n\n# Clear everything\n# inventory.clear()  # Empty dictionary!",
      "followUp": "pop() is great - it removes AND returns the value!",
      "options": [
        {
          "text": "What methods do dictionaries have?",
          "next": "dictMethods"
        }
      ]
    },
    "dictMethods": {
      "id": "dictMethods",
      "speaker": "Pixel",
      "text": "Dictionaries have powerful methods for game development!",
      "codeExample": "player = {'name': 'Hero', 'level': 10, 'gold': 500}\n\n# Get all keys\nattributes = list(player.keys())\n# ['name', 'level', 'gold']\n\n# Get all values\nvalues = list(player.values())\n# ['Hero', 10, 500]\n\n# Get key-value pairs\nitems = list(player.items())\n# [('name', 'Hero'), ('level', 10), ('gold', 500)]\n\n# Check if key exists\nif 'level' in player:\n    print(f'Level: {player['level']}')\n\n# Loop through dictionary\nfor key, value in player.items():\n    print(f'{key}: {value}')",
      "followUp": "These methods let you explore and manipulate your data structures!",
      "options": [
        {
          "text": "Can I nest dictionaries?",
          "next": "nestedDict"
        },
        {
          "text": "Show me game examples!",
          "next": "gameExamples"
        }
      ]
    },
    "nestedDict": {
      "id": "nestedDict",
      "speaker": "Pixel",
      "text": "Nested dictionaries are perfect for complex game data - like full RPG characters!",
      "codeExample": "# Complete character sheet\ncharacter = {\n    'info': {\n        'name': 'Aria',\n        'class': 'Mage',\n        'level': 15\n    },\n    'stats': {\n        'health': 120,\n        'mana': 200,\n        'strength': 10,\n        'intelligence': 25\n    },\n    'equipment': {\n        'weapon': 'Fire Staff',\n        'armor': 'Mystic Robe',\n        'accessory': 'Mana Ring'\n    },\n    'inventory': {\n        'potions': 5,\n        'scrolls': 3\n    }\n}\n\n# Access nested values\nweapon = character['equipment']['weapon']\nmana = character['stats']['mana']\n\n# Modify nested values\ncharacter['stats']['health'] -= 30  # Take damage\ncharacter['inventory']['potions'] -= 1  # Use potion",
      "followUp": "Nested dictionaries can represent entire game worlds!",
      "options": [
        {
          "text": "Show me practical game uses!",
          "next": "gameExamples"
        }
      ]
    },
    "gameExamples": {
      "id": "gameExamples",
      "speaker": "Pixel",
      "text": "Let's see dictionaries in action for real game systems!",
      "codeExample": "# Game settings\nsettings = {\n    'volume': 0.8,\n    'difficulty': 'normal',\n    'fullscreen': False,\n    'controls': {\n        'up': 'W',\n        'down': 'S',\n        'left': 'A',\n        'right': 'D',\n        'jump': 'SPACE'\n    }\n}\n\n# Enemy database\nenemies = {\n    'goblin': {'hp': 30, 'damage': 5, 'exp': 10},\n    'orc': {'hp': 50, 'damage': 10, 'exp': 25},\n    'dragon': {'hp': 500, 'damage': 50, 'exp': 1000}\n}\n\n# Spawn an enemy\nenemy_type = 'orc'\nif enemy_type in enemies:\n    enemy = enemies[enemy_type].copy()\n    print(f'Spawned {enemy_type} with {enemy['hp']} HP!')\n\n# Quest system\nquests = {\n    'main_01': {\n        'title': 'Save the Village',\n        'description': 'Defeat the goblins',\n        'reward': {'gold': 100, 'exp': 50},\n        'completed': False\n    }\n}",
      "followUp": "Dictionaries are the backbone of game data management!",
      "options": [
        {
          "text": "Can I convert between lists and dicts?",
          "next": "conversion"
        },
        {
          "text": "Time to practice!",
          "next": "practiceChallenge"
        }
      ]
    },
    "conversion": {
      "id": "conversion",
      "speaker": "Pixel",
      "text": "You can convert between lists and dictionaries when needed!",
      "codeExample": "# List of tuples to dictionary\nitems = [('sword', 1), ('shield', 1), ('potion', 5)]\ninventory = dict(items)\n# {'sword': 1, 'shield': 1, 'potion': 5}\n\n# Two lists to dictionary\nkeys = ['health', 'mana', 'stamina']\nvalues = [100, 50, 75]\nstats = dict(zip(keys, values))\n# {'health': 100, 'mana': 50, 'stamina': 75}\n\n# Dictionary to lists\nplayer = {'name': 'Hero', 'level': 10}\nkeys_list = list(player.keys())    # ['name', 'level']\nvalues_list = list(player.values()) # ['Hero', 10]",
      "followUp": "Converting between structures gives you flexibility!",
      "options": [
        {
          "text": "Let me practice!",
          "next": "practiceChallenge"
        }
      ]
    },
    "practiceChallenge": {
      "id": "practiceChallenge",
      "speaker": "Pixel",
      "text": "Epic Challenge: Build a complete inventory system with dictionaries!",
      "followUp": "Track item quantities, categories, and implement a shop system!",
      "codeExample": "# Advanced Inventory System\ninventory = {\n    'weapons': {'sword': 1, 'bow': 1},\n    'armor': {'helmet': 1, 'chestplate': 1},\n    'consumables': {'potion': 5, 'food': 10}\n}\n\ndef add_item(category, item, quantity=1):\n    if category in inventory:\n        if item in inventory[category]:\n            inventory[category][item] += quantity\n        else:\n            inventory[category][item] = quantity\n        print(f'Added {quantity} {item}(s)')\n\ndef use_item(category, item):\n    if category in inventory and item in inventory[category]:\n        if inventory[category][item] > 0:\n            inventory[category][item] -= 1\n            print(f'Used {item}')\n            if inventory[category][item] == 0:\n                del inventory[category][item]\n            return True\n    print(f'No {item} available!')\n    return False\n\ndef show_inventory():\n    print('=== INVENTORY ===')\n    for category, items in inventory.items():\n        print(f'{category.upper()}:')\n        for item, qty in items.items():\n            print(f'  {item}: {qty}')\n\n# Test it!\nadd_item('weapons', 'sword', 2)\nuse_item('consumables', 'potion')\nshow_inventory()",
      "options": [
        {
          "text": "Dictionaries are perfect for game data!",
          "next": "lessonComplete"
        }
      ]
    },
    "lessonComplete": {
      "id": "lessonComplete",
      "speaker": "Pixel",
      "text": "🎊 LEVEL 7 COMPLETE! You've mastered data organization! 🗂️",
      "followUp": "Dictionaries let you build complex game systems - inventories, stats, quests, everything!",
      "action": "completeLesson",
      "actionParams": { "lesson": 7, "nextLesson": 8 },
      "options": [
        {
          "text": "Continue to Lesson 8 - Classes & Objects!",
          "action": "loadLesson",
          "actionParams": { "lesson": 8 }
        },
        {
          "text": "I want to start making games!",
          "action": "startGameMode"
        },
        {
          "text": "Back to lesson menu",
          "action": "openLessons"
        }
      ]
    }
  },
  "startNode": "start"
}