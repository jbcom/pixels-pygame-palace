{
  "nodes": {
    "start": {
      "id": "start",
      "speaker": "Pixel",
      "text": "Level 9 - PYGAME TIME! Let's turn your Python skills into REAL GAMES! ðŸŽ®",
      "followUp": "PyGame is your gateway to graphics, sounds, and player input - everything you need for awesome games!",
      "options": [
        {
          "text": "I'm ready to make games!",
          "next": "pygameBasics"
        },
        {
          "text": "What can I build with PyGame?",
          "next": "pygamePossibilities"
        }
      ]
    },
    "pygamePossibilities": {
      "id": "pygamePossibilities",
      "speaker": "Pixel",
      "text": "EVERYTHING! Platformers, RPGs, puzzle games, racing games... if you can imagine it, PyGame can build it!",
      "followUp": "Famous games like Frets on Fire were made with PyGame! Let's start your journey!",
      "options": [
        {
          "text": "Show me PyGame magic!",
          "next": "pygameBasics"
        }
      ]
    },
    "pygameBasics": {
      "id": "pygameBasics",
      "speaker": "Pixel",
      "text": "Every PyGame program starts the same way - initialize, create a window, and run a game loop!",
      "codeExample": "import pygame\n\n# Initialize PyGame\npygame.init()\n\n# Create game window\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('My First Game!')\n\n# Game loop\nrunning = True\nclock = pygame.time.Clock()\n\nwhile running:\n    # Handle events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    \n    # Fill screen with color (R, G, B)\n    screen.fill((0, 128, 255))  # Sky blue!\n    \n    # Update display\n    pygame.display.flip()\n    clock.tick(60)  # 60 FPS\n\npygame.quit()",
      "followUp": "This is your game's heartbeat - the loop that keeps everything running!",
      "options": [
        {
          "text": "How do I add graphics?",
          "next": "drawingShapes"
        },
        {
          "text": "Explain the game loop",
          "next": "gameLoopExplained"
        }
      ]
    },
    "gameLoopExplained": {
      "id": "gameLoopExplained",
      "speaker": "Pixel",
      "text": "The game loop is like your game's heartbeat - it runs 60 times per second!",
      "codeExample": "# The Game Loop Pattern:\nwhile running:\n    # 1. HANDLE INPUT - What did player do?\n    for event in pygame.event.get():\n        # Check keyboard, mouse, etc.\n        pass\n    \n    # 2. UPDATE GAME STATE - Move things, check collisions\n    player.move()\n    enemies.update()\n    check_collisions()\n    \n    # 3. DRAW EVERYTHING - Show the current state\n    screen.fill(background_color)\n    player.draw(screen)\n    enemies.draw(screen)\n    \n    # 4. CONTROL SPEED - Keep it smooth!\n    pygame.display.flip()\n    clock.tick(60)  # 60 frames per second",
      "followUp": "Input â†’ Update â†’ Draw â†’ Repeat. That's the magic formula!",
      "options": [
        {
          "text": "Let's draw something!",
          "next": "drawingShapes"
        }
      ]
    },
    "drawingShapes": {
      "id": "drawingShapes",
      "speaker": "Pixel",
      "text": "PyGame can draw shapes, images, and text! Let's start with colorful shapes!",
      "codeExample": "import pygame\npygame.init()\n\nscreen = pygame.display.set_mode((800, 600))\nrunning = True\nclock = pygame.time.Clock()\n\n# Colors (R, G, B)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nYELLOW = (255, 255, 0)\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    \n    screen.fill(WHITE)\n    \n    # Draw shapes!\n    pygame.draw.circle(screen, RED, (400, 300), 50)  # Circle\n    pygame.draw.rect(screen, BLUE, (100, 100, 200, 150))  # Rectangle\n    pygame.draw.line(screen, GREEN, (0, 0), (800, 600), 5)  # Line\n    \n    # Draw filled shapes\n    pygame.draw.circle(screen, YELLOW, (600, 100), 30)\n    pygame.draw.polygon(screen, RED, [(300, 400), (400, 400), (350, 300)])\n    \n    pygame.display.flip()\n    clock.tick(60)\n\npygame.quit()",
      "followUp": "Shapes are the building blocks - combine them to create anything!",
      "options": [
        {
          "text": "How do I move things?",
          "next": "movement"
        },
        {
          "text": "Can I use images?",
          "next": "sprites"
        }
      ]
    },
    "movement": {
      "id": "movement",
      "speaker": "Pixel",
      "text": "Movement is just changing position over time - add to X to go right, subtract to go left!",
      "codeExample": "import pygame\npygame.init()\n\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\n# Player position and speed\nplayer_x = 400\nplayer_y = 300\nspeed = 5\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    \n    # Get keyboard input\n    keys = pygame.key.get_pressed()\n    \n    # Move based on keys\n    if keys[pygame.K_LEFT]:\n        player_x -= speed\n    if keys[pygame.K_RIGHT]:\n        player_x += speed\n    if keys[pygame.K_UP]:\n        player_y -= speed\n    if keys[pygame.K_DOWN]:\n        player_y += speed\n    \n    # Keep player on screen\n    player_x = max(25, min(775, player_x))\n    player_y = max(25, min(575, player_y))\n    \n    # Draw everything\n    screen.fill((100, 100, 100))\n    pygame.draw.circle(screen, (255, 255, 0), (player_x, player_y), 25)\n    \n    pygame.display.flip()\n    clock.tick(60)",
      "followUp": "Arrow keys control movement - you just made an interactive game!",
      "options": [
        {
          "text": "What about images and sprites?",
          "next": "sprites"
        },
        {
          "text": "How do I detect collisions?",
          "next": "collisions"
        }
      ]
    },
    "sprites": {
      "id": "sprites",
      "speaker": "Pixel",
      "text": "Sprites are game images - characters, items, backgrounds. PyGame makes them easy to use!",
      "codeExample": "import pygame\npygame.init()\n\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\n# Load an image (you'll need an image file!)\n# player_image = pygame.image.load('player.png')\n# For now, let's create a surface\nplayer_image = pygame.Surface((50, 50))\nplayer_image.fill((0, 255, 0))  # Green square as placeholder\n\nclass Player:\n    def __init__(self, x, y):\n        self.image = player_image\n        self.rect = self.image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\n        self.speed = 5\n    \n    def update(self, keys):\n        if keys[pygame.K_LEFT]:\n            self.rect.x -= self.speed\n        if keys[pygame.K_RIGHT]:\n            self.rect.x += self.speed\n    \n    def draw(self, screen):\n        screen.blit(self.image, self.rect)\n\n# Create player\nplayer = Player(400, 300)\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    \n    keys = pygame.key.get_pressed()\n    player.update(keys)\n    \n    screen.fill((100, 100, 100))\n    player.draw(screen)\n    \n    pygame.display.flip()\n    clock.tick(60)",
      "followUp": "Sprites + Classes = organized, powerful game objects!",
      "options": [
        {
          "text": "How do collisions work?",
          "next": "collisions"
        },
        {
          "text": "Can I add sound?",
          "next": "sound"
        }
      ]
    },
    "collisions": {
      "id": "collisions",
      "speaker": "Pixel",
      "text": "Collisions detect when game objects touch - essential for gameplay!",
      "codeExample": "import pygame\nimport random\npygame.init()\n\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\nclass GameObject:\n    def __init__(self, x, y, width, height, color):\n        self.rect = pygame.Rect(x, y, width, height)\n        self.color = color\n    \n    def draw(self, screen):\n        pygame.draw.rect(screen, self.color, self.rect)\n\n# Create player and collectibles\nplayer = GameObject(400, 300, 50, 50, (0, 255, 0))\ncoin = GameObject(200, 200, 30, 30, (255, 255, 0))\nscore = 0\n\nfont = pygame.font.Font(None, 36)\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    \n    # Move player\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_LEFT]: player.rect.x -= 5\n    if keys[pygame.K_RIGHT]: player.rect.x += 5\n    if keys[pygame.K_UP]: player.rect.y -= 5\n    if keys[pygame.K_DOWN]: player.rect.y += 5\n    \n    # Check collision!\n    if player.rect.colliderect(coin.rect):\n        score += 10\n        # Move coin to new position\n        coin.rect.x = random.randint(0, 750)\n        coin.rect.y = random.randint(0, 550)\n    \n    # Draw everything\n    screen.fill((50, 50, 50))\n    player.draw(screen)\n    coin.draw(screen)\n    \n    # Draw score\n    score_text = font.render(f'Score: {score}', True, (255, 255, 255))\n    screen.blit(score_text, (10, 10))\n    \n    pygame.display.flip()\n    clock.tick(60)",
      "followUp": "colliderect() checks if rectangles overlap - instant collision detection!",
      "options": [
        {
          "text": "What about sound effects?",
          "next": "sound"
        },
        {
          "text": "Show me game states!",
          "next": "gameStates"
        }
      ]
    },
    "sound": {
      "id": "sound",
      "speaker": "Pixel",
      "text": "Sound brings games to life! Music, effects, voices - PyGame handles it all!",
      "codeExample": "import pygame\npygame.init()\npygame.mixer.init()  # Initialize sound system\n\n# Load sounds (you'll need sound files!)\n# jump_sound = pygame.mixer.Sound('jump.wav')\n# coin_sound = pygame.mixer.Sound('coin.wav')\n# pygame.mixer.music.load('background_music.mp3')\n\n# For demonstration, let's create beeps\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\n# Play background music\n# pygame.mixer.music.play(-1)  # -1 means loop forever\n\nclass Player:\n    def __init__(self):\n        self.x = 400\n        self.y = 500\n        self.jumping = False\n        self.jump_speed = 0\n    \n    def jump(self):\n        if not self.jumping:\n            self.jumping = True\n            self.jump_speed = -15\n            # jump_sound.play()  # Play sound effect!\n            print('Jump sound!')\n    \n    def update(self):\n        if self.jumping:\n            self.y += self.jump_speed\n            self.jump_speed += 1  # Gravity\n            if self.y >= 500:\n                self.y = 500\n                self.jumping = False\n\nplayer = Player()\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_SPACE:\n                player.jump()\n    \n    player.update()\n    \n    screen.fill((135, 206, 235))  # Sky blue\n    pygame.draw.circle(screen, (255, 100, 0), (int(player.x), int(player.y)), 25)\n    pygame.draw.rect(screen, (100, 200, 100), (0, 525, 800, 75))  # Ground\n    \n    pygame.display.flip()\n    clock.tick(60)",
      "followUp": "Sound effects make actions feel real - every jump, hit, and victory!",
      "options": [
        {
          "text": "How do I manage game states?",
          "next": "gameStates"
        }
      ]
    },
    "gameStates": {
      "id": "gameStates",
      "speaker": "Pixel",
      "text": "Game states manage different screens - menu, playing, game over. Essential for complete games!",
      "codeExample": "import pygame\npygame.init()\n\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\nfont = pygame.font.Font(None, 74)\nsmall_font = pygame.font.Font(None, 36)\n\n# Game states\nMENU = 'menu'\nPLAYING = 'playing'\nGAME_OVER = 'game_over'\n\ncurrent_state = MENU\nscore = 0\n\ndef draw_menu(screen):\n    screen.fill((50, 50, 50))\n    title = font.render('MY GAME', True, (255, 255, 255))\n    start = small_font.render('Press SPACE to Start', True, (200, 200, 200))\n    screen.blit(title, (250, 200))\n    screen.blit(start, (250, 350))\n\ndef draw_game(screen):\n    screen.fill((100, 150, 200))\n    score_text = small_font.render(f'Score: {score}', True, (255, 255, 255))\n    screen.blit(score_text, (10, 10))\n    # Draw game objects here\n\ndef draw_game_over(screen):\n    screen.fill((100, 0, 0))\n    over = font.render('GAME OVER', True, (255, 255, 255))\n    restart = small_font.render('Press R to Restart', True, (200, 200, 200))\n    screen.blit(over, (200, 200))\n    screen.blit(restart, (250, 350))\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYDOWN:\n            if current_state == MENU:\n                if event.key == pygame.K_SPACE:\n                    current_state = PLAYING\n                    score = 0\n            elif current_state == PLAYING:\n                if event.key == pygame.K_ESCAPE:\n                    current_state = GAME_OVER\n            elif current_state == GAME_OVER:\n                if event.key == pygame.K_r:\n                    current_state = MENU\n    \n    # Draw based on state\n    if current_state == MENU:\n        draw_menu(screen)\n    elif current_state == PLAYING:\n        draw_game(screen)\n        score += 1  # Simple score increase\n        if score > 500:  # End game after score\n            current_state = GAME_OVER\n    elif current_state == GAME_OVER:\n        draw_game_over(screen)\n    \n    pygame.display.flip()\n    clock.tick(60)",
      "followUp": "States let you build complete games with menus, levels, and endings!",
      "options": [
        {
          "text": "I'm ready to build something!",
          "next": "miniProject"
        }
      ]
    },
    "miniProject": {
      "id": "miniProject",
      "speaker": "Pixel",
      "text": "Let's combine everything into a mini game - Coin Collector!",
      "followUp": "Use arrow keys to collect coins, avoid enemies, and get the high score!",
      "codeExample": "# COIN COLLECTOR GAME\nimport pygame\nimport random\n\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Coin Collector!')\nclock = pygame.time.Clock()\nfont = pygame.font.Font(None, 36)\n\n# Game objects\nplayer = pygame.Rect(400, 300, 40, 40)\ncoins = []\nenemies = []\nscore = 0\ngame_over = False\n\n# Create coins\nfor _ in range(5):\n    coin = pygame.Rect(random.randint(0, 760), random.randint(0, 560), 20, 20)\n    coins.append(coin)\n\n# Create enemies\nfor _ in range(3):\n    enemy = pygame.Rect(random.randint(0, 760), random.randint(0, 560), 30, 30)\n    enemies.append(enemy)\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    \n    if not game_over:\n        # Move player\n        keys = pygame.key.get_pressed()\n        if keys[pygame.K_LEFT]: player.x -= 5\n        if keys[pygame.K_RIGHT]: player.x += 5\n        if keys[pygame.K_UP]: player.y -= 5\n        if keys[pygame.K_DOWN]: player.y += 5\n        \n        # Keep player on screen\n        player.x = max(0, min(760, player.x))\n        player.y = max(0, min(560, player.y))\n        \n        # Check coin collection\n        for coin in coins[:]:\n            if player.colliderect(coin):\n                coins.remove(coin)\n                score += 10\n                # Spawn new coin\n                new_coin = pygame.Rect(random.randint(0, 760), random.randint(0, 560), 20, 20)\n                coins.append(new_coin)\n        \n        # Check enemy collision\n        for enemy in enemies:\n            if player.colliderect(enemy):\n                game_over = True\n        \n        # Move enemies randomly\n        for enemy in enemies:\n            enemy.x += random.randint(-2, 2)\n            enemy.y += random.randint(-2, 2)\n            enemy.x = max(0, min(770, enemy.x))\n            enemy.y = max(0, min(570, enemy.y))\n    \n    # Draw everything\n    screen.fill((50, 50, 50))\n    \n    if not game_over:\n        pygame.draw.rect(screen, (0, 255, 0), player)  # Player - green\n        for coin in coins:\n            pygame.draw.circle(screen, (255, 255, 0), coin.center, 10)  # Coins - yellow\n        for enemy in enemies:\n            pygame.draw.rect(screen, (255, 0, 0), enemy)  # Enemies - red\n    else:\n        game_over_text = font.render('GAME OVER!', True, (255, 255, 255))\n        screen.blit(game_over_text, (300, 250))\n    \n    score_text = font.render(f'Score: {score}', True, (255, 255, 255))\n    screen.blit(score_text, (10, 10))\n    \n    pygame.display.flip()\n    clock.tick(60)\n\npygame.quit()",
      "options": [
        {
          "text": "PyGame is amazing!",
          "next": "lessonComplete"
        }
      ]
    },
    "lessonComplete": {
      "id": "lessonComplete",
      "speaker": "Pixel",
      "text": "ðŸŽŠ LEVEL 9 COMPLETE! You're now a PyGame Developer! ðŸŽ®",
      "followUp": "You know the core of game development - graphics, input, collisions, states. Time to build YOUR game!",
      "action": "completeLesson",
      "actionParams": { "lesson": 9, "nextLesson": 10 },
      "options": [
        {
          "text": "Final Lesson - Build a Complete Game!",
          "action": "loadLesson",
          "actionParams": { "lesson": 10 }
        },
        {
          "text": "I want to start my own game NOW!",
          "action": "startGameMode"
        },
        {
          "text": "Back to lesson menu",
          "action": "openLessons"
        }
      ]
    }
  },
  "startNode": "start"
}