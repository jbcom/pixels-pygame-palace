{
  "nodes": {
    "start": {
      "id": "start",
      "speaker": "Pixel",
      "text": "ðŸŽ® FINAL LEVEL - Time to build a COMPLETE GAME from scratch! This is it!",
      "followUp": "We're making 'Space Defender' - a full game with player, enemies, scoring, levels, and game over!",
      "options": [
        {
          "text": "Let's build this game!",
          "next": "gameDesign"
        },
        {
          "text": "What will we create?",
          "next": "gameOverview"
        }
      ]
    },
    "gameOverview": {
      "id": "gameOverview",
      "speaker": "Pixel",
      "text": "Space Defender: You're a spaceship defending Earth from alien invaders!",
      "followUp": "Features: Movement, shooting, enemies, collision, scoring, levels, power-ups, and game over screen!",
      "options": [
        {
          "text": "Sounds epic! Let's start!",
          "next": "gameDesign"
        }
      ]
    },
    "gameDesign": {
      "id": "gameDesign",
      "speaker": "Pixel",
      "text": "First rule of game dev: Plan before you code! Let's design our game structure!",
      "codeExample": "# SPACE DEFENDER - Game Design\n\"\"\"\nGAME ELEMENTS:\n1. Player spaceship (moves left/right, shoots)\n2. Enemy aliens (move down, increase speed each level)\n3. Bullets (player shoots up)\n4. Score system (points for each enemy)\n5. Lives system (3 lives)\n6. Levels (get harder over time)\n7. Power-ups (rapid fire, shield)\n8. Game states (menu, playing, game over)\n\nCONTROLS:\n- Arrow Keys: Move\n- Space: Shoot\n- P: Pause\n- R: Restart (when game over)\n\"\"\"",
      "followUp": "Good planning = smoother development. Now let's code the foundation!",
      "options": [
        {
          "text": "Start with the game window",
          "next": "gameSetup"
        }
      ]
    },
    "gameSetup": {
      "id": "gameSetup",
      "speaker": "Pixel",
      "text": "Let's create the game window and basic structure!",
      "codeExample": "import pygame\nimport random\nimport math\n\n# Initialize PyGame\npygame.init()\n\n# Constants\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nFPS = 60\n\n# Colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\nBLUE = (0, 0, 255)\nYELLOW = (255, 255, 0)\n\n# Create game window\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Space Defender')\nclock = pygame.time.Clock()\n\n# Fonts\nfont_large = pygame.font.Font(None, 74)\nfont_medium = pygame.font.Font(None, 36)\nfont_small = pygame.font.Font(None, 24)",
      "followUp": "Foundation ready! Now let's create the Player class!",
      "options": [
        {
          "text": "Create the player spaceship",
          "next": "playerClass"
        }
      ]
    },
    "playerClass": {
      "id": "playerClass",
      "speaker": "Pixel",
      "text": "The player is the heart of our game - let's make it awesome!",
      "codeExample": "class Player:\n    def __init__(self, x, y):\n        self.rect = pygame.Rect(x, y, 50, 40)\n        self.speed = 5\n        self.lives = 3\n        self.can_shoot = True\n        self.shoot_cooldown = 0\n        \n    def update(self, keys):\n        # Movement\n        if keys[pygame.K_LEFT] and self.rect.left > 0:\n            self.rect.x -= self.speed\n        if keys[pygame.K_RIGHT] and self.rect.right < SCREEN_WIDTH:\n            self.rect.x += self.speed\n        \n        # Shooting cooldown\n        if self.shoot_cooldown > 0:\n            self.shoot_cooldown -= 1\n        else:\n            self.can_shoot = True\n    \n    def shoot(self):\n        if self.can_shoot:\n            self.can_shoot = False\n            self.shoot_cooldown = 20  # Frames between shots\n            return Bullet(self.rect.centerx, self.rect.top)\n        return None\n    \n    def draw(self, screen):\n        # Draw spaceship (triangle)\n        points = [\n            (self.rect.centerx, self.rect.top),\n            (self.rect.left, self.rect.bottom),\n            (self.rect.right, self.rect.bottom)\n        ]\n        pygame.draw.polygon(screen, GREEN, points)\n        \n    def hit(self):\n        self.lives -= 1\n        return self.lives <= 0  # Return True if game over",
      "followUp": "Player ready! Now we need bullets to shoot!",
      "options": [
        {
          "text": "Add the bullet system",
          "next": "bulletClass"
        }
      ]
    },
    "bulletClass": {
      "id": "bulletClass",
      "speaker": "Pixel",
      "text": "Bullets are simple but crucial - they defeat enemies!",
      "codeExample": "class Bullet:\n    def __init__(self, x, y):\n        self.rect = pygame.Rect(x - 2, y, 4, 10)\n        self.speed = 10\n        self.active = True\n    \n    def update(self):\n        self.rect.y -= self.speed\n        # Remove if off-screen\n        if self.rect.bottom < 0:\n            self.active = False\n    \n    def draw(self, screen):\n        pygame.draw.rect(screen, YELLOW, self.rect)\n\nclass EnemyBullet(Bullet):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n        self.speed = -5  # Moves down\n        \n    def update(self):\n        self.rect.y -= self.speed  # Negative speed = move down\n        if self.rect.top > SCREEN_HEIGHT:\n            self.active = False\n    \n    def draw(self, screen):\n        pygame.draw.rect(screen, RED, self.rect)",
      "followUp": "Bullets ready! Time for the enemies!",
      "options": [
        {
          "text": "Create enemy aliens",
          "next": "enemyClass"
        }
      ]
    },
    "enemyClass": {
      "id": "enemyClass",
      "speaker": "Pixel",
      "text": "Enemies make the game challenging - let's create smart aliens!",
      "codeExample": "class Enemy:\n    def __init__(self, x, y, enemy_type=1):\n        self.rect = pygame.Rect(x, y, 40, 30)\n        self.type = enemy_type\n        self.speed = enemy_type  # Harder enemies move faster\n        self.direction = 1\n        self.drop_distance = 40\n        self.shoot_chance = 0.001 * enemy_type  # Higher types shoot more\n        self.points = 10 * enemy_type\n        \n    def update(self):\n        self.rect.x += self.speed * self.direction\n        \n    def drop_down(self):\n        self.rect.y += self.drop_distance\n        self.direction *= -1  # Reverse direction\n        \n    def should_shoot(self):\n        return random.random() < self.shoot_chance\n    \n    def shoot(self):\n        return EnemyBullet(self.rect.centerx, self.rect.bottom)\n    \n    def draw(self, screen):\n        color = [RED, BLUE, (255, 0, 255)][self.type - 1]  # Different colors\n        # Draw alien shape\n        pygame.draw.ellipse(screen, color, self.rect)\n        # Draw eyes\n        eye_y = self.rect.y + 10\n        pygame.draw.circle(screen, WHITE, (self.rect.x + 12, eye_y), 3)\n        pygame.draw.circle(screen, WHITE, (self.rect.x + 28, eye_y), 3)\n\nclass PowerUp:\n    def __init__(self, x, y, power_type):\n        self.rect = pygame.Rect(x, y, 30, 30)\n        self.type = power_type  # 'rapid', 'shield', 'life'\n        self.speed = 2\n        self.active = True\n        \n    def update(self):\n        self.rect.y += self.speed\n        if self.rect.top > SCREEN_HEIGHT:\n            self.active = False\n    \n    def draw(self, screen):\n        colors = {'rapid': YELLOW, 'shield': BLUE, 'life': GREEN}\n        pygame.draw.circle(screen, colors.get(self.type, WHITE), self.rect.center, 15)",
      "followUp": "Enemies ready! Now let's build the main game logic!",
      "options": [
        {
          "text": "Create the game manager",
          "next": "gameManager"
        }
      ]
    },
    "gameManager": {
      "id": "gameManager",
      "speaker": "Pixel",
      "text": "The Game Manager ties everything together - it's the brain of our game!",
      "codeExample": "class Game:\n    def __init__(self):\n        self.reset_game()\n        self.state = 'MENU'  # MENU, PLAYING, PAUSED, GAME_OVER\n        self.high_score = 0\n        \n    def reset_game(self):\n        self.player = Player(SCREEN_WIDTH // 2 - 25, SCREEN_HEIGHT - 60)\n        self.bullets = []\n        self.enemy_bullets = []\n        self.enemies = []\n        self.power_ups = []\n        self.score = 0\n        self.level = 1\n        self.spawn_enemies()\n        \n    def spawn_enemies(self):\n        # Create grid of enemies\n        rows = min(3 + self.level // 2, 6)  # More rows each level\n        cols = 8\n        enemy_type = min((self.level - 1) // 3 + 1, 3)  # Harder enemies\n        \n        for row in range(rows):\n            for col in range(cols):\n                x = 75 + col * 80\n                y = 50 + row * 50\n                self.enemies.append(Enemy(x, y, enemy_type))\n    \n    def handle_collisions(self):\n        # Player bullets hit enemies\n        for bullet in self.bullets[:]:\n            for enemy in self.enemies[:]:\n                if bullet.rect.colliderect(enemy.rect):\n                    self.bullets.remove(bullet)\n                    self.enemies.remove(enemy)\n                    self.score += enemy.points\n                    \n                    # Chance to drop power-up\n                    if random.random() < 0.1:  # 10% chance\n                        power_type = random.choice(['rapid', 'shield', 'life'])\n                        self.power_ups.append(PowerUp(enemy.rect.centerx, enemy.rect.centery, power_type))\n                    break\n        \n        # Enemy bullets hit player\n        for bullet in self.enemy_bullets[:]:\n            if bullet.rect.colliderect(self.player.rect):\n                self.enemy_bullets.remove(bullet)\n                if self.player.hit():  # Returns True if game over\n                    self.state = 'GAME_OVER'\n                    if self.score > self.high_score:\n                        self.high_score = self.score\n        \n        # Player collects power-ups\n        for power in self.power_ups[:]:\n            if power.rect.colliderect(self.player.rect):\n                self.power_ups.remove(power)\n                if power.type == 'life':\n                    self.player.lives += 1\n                elif power.type == 'rapid':\n                    self.player.shoot_cooldown = 5  # Faster shooting\n                # Add more power-up effects\n        \n        # Enemies reach player\n        for enemy in self.enemies:\n            if enemy.rect.bottom >= self.player.rect.top:\n                self.state = 'GAME_OVER'\n    \n    def next_level(self):\n        self.level += 1\n        self.spawn_enemies()\n        # Bonus points for completing level\n        self.score += 100 * self.level",
      "followUp": "Game logic ready! Now let's create the main game loop!",
      "options": [
        {
          "text": "Build the complete game loop",
          "next": "completeGame"
        }
      ]
    },
    "completeGame": {
      "id": "completeGame",
      "speaker": "Pixel",
      "text": "Here it is - the COMPLETE SPACE DEFENDER game! You did it!",
      "codeExample": "# COMPLETE SPACE DEFENDER GAME\nimport pygame\nimport random\n\n# [Include all previous classes here]\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n    pygame.display.set_caption('Space Defender')\n    clock = pygame.time.Clock()\n    \n    game = Game()\n    running = True\n    \n    while running:\n        # Handle events\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n            \n            if event.type == pygame.KEYDOWN:\n                if game.state == 'MENU':\n                    if event.key == pygame.K_SPACE:\n                        game.state = 'PLAYING'\n                        game.reset_game()\n                \n                elif game.state == 'PLAYING':\n                    if event.key == pygame.K_SPACE:\n                        bullet = game.player.shoot()\n                        if bullet:\n                            game.bullets.append(bullet)\n                    elif event.key == pygame.K_p:\n                        game.state = 'PAUSED'\n                \n                elif game.state == 'PAUSED':\n                    if event.key == pygame.K_p:\n                        game.state = 'PLAYING'\n                \n                elif game.state == 'GAME_OVER':\n                    if event.key == pygame.K_r:\n                        game.state = 'MENU'\n        \n        # Update game state\n        if game.state == 'PLAYING':\n            keys = pygame.key.get_pressed()\n            game.player.update(keys)\n            \n            # Update bullets\n            for bullet in game.bullets[:]:\n                bullet.update()\n                if not bullet.active:\n                    game.bullets.remove(bullet)\n            \n            for bullet in game.enemy_bullets[:]:\n                bullet.update()\n                if not bullet.active:\n                    game.enemy_bullets.remove(bullet)\n            \n            # Update enemies\n            move_down = False\n            for enemy in game.enemies:\n                enemy.update()\n                # Check if hit edge\n                if enemy.rect.left <= 0 or enemy.rect.right >= SCREEN_WIDTH:\n                    move_down = True\n                # Enemy shooting\n                if enemy.should_shoot():\n                    game.enemy_bullets.append(enemy.shoot())\n            \n            if move_down:\n                for enemy in game.enemies:\n                    enemy.drop_down()\n            \n            # Update power-ups\n            for power in game.power_ups[:]:\n                power.update()\n                if not power.active:\n                    game.power_ups.remove(power)\n            \n            # Check collisions\n            game.handle_collisions()\n            \n            # Check level complete\n            if not game.enemies:\n                game.next_level()\n        \n        # Draw everything\n        screen.fill(BLACK)\n        \n        if game.state == 'MENU':\n            title = font_large.render('SPACE DEFENDER', True, GREEN)\n            start = font_medium.render('Press SPACE to Start', True, WHITE)\n            high = font_small.render(f'High Score: {game.high_score}', True, YELLOW)\n            screen.blit(title, (SCREEN_WIDTH//2 - 250, 200))\n            screen.blit(start, (SCREEN_WIDTH//2 - 150, 350))\n            screen.blit(high, (SCREEN_WIDTH//2 - 80, 450))\n        \n        elif game.state == 'PLAYING':\n            # Draw game objects\n            game.player.draw(screen)\n            for bullet in game.bullets:\n                bullet.draw(screen)\n            for bullet in game.enemy_bullets:\n                bullet.draw(screen)\n            for enemy in game.enemies:\n                enemy.draw(screen)\n            for power in game.power_ups:\n                power.draw(screen)\n            \n            # Draw HUD\n            score_text = font_small.render(f'Score: {game.score}', True, WHITE)\n            level_text = font_small.render(f'Level: {game.level}', True, WHITE)\n            lives_text = font_small.render(f'Lives: {game.player.lives}', True, GREEN)\n            screen.blit(score_text, (10, 10))\n            screen.blit(level_text, (10, 40))\n            screen.blit(lives_text, (10, 70))\n        \n        elif game.state == 'PAUSED':\n            pause_text = font_large.render('PAUSED', True, YELLOW)\n            screen.blit(pause_text, (SCREEN_WIDTH//2 - 120, SCREEN_HEIGHT//2))\n        \n        elif game.state == 'GAME_OVER':\n            over_text = font_large.render('GAME OVER', True, RED)\n            score_text = font_medium.render(f'Final Score: {game.score}', True, WHITE)\n            restart = font_small.render('Press R to Return to Menu', True, WHITE)\n            screen.blit(over_text, (SCREEN_WIDTH//2 - 180, 200))\n            screen.blit(score_text, (SCREEN_WIDTH//2 - 120, 300))\n            screen.blit(restart, (SCREEN_WIDTH//2 - 140, 400))\n        \n        pygame.display.flip()\n        clock.tick(FPS)\n    \n    pygame.quit()\n\nif __name__ == '__main__':\n    main()",
      "followUp": "YOU DID IT! You've created a complete, playable game with all the features!",
      "options": [
        {
          "text": "This is amazing!",
          "next": "improvements"
        }
      ]
    },
    "improvements": {
      "id": "improvements",
      "speaker": "Pixel",
      "text": "Your game works! Now you can add YOUR ideas to make it unique!",
      "codeExample": "# IDEAS TO EXPAND YOUR GAME:\n\n# 1. Add Graphics\n# player_image = pygame.image.load('spaceship.png')\n# enemy_image = pygame.image.load('alien.png')\n\n# 2. Add Sound Effects\n# shoot_sound = pygame.mixer.Sound('laser.wav')\n# explosion_sound = pygame.mixer.Sound('boom.wav')\n# pygame.mixer.music.load('background_music.mp3')\n# pygame.mixer.music.play(-1)\n\n# 3. Add More Power-Ups\n# - Double shot\n# - Invincibility shield\n# - Time slow\n# - Bomb that clears screen\n\n# 4. Add Boss Enemies\n# class Boss(Enemy):\n#     def __init__(self):\n#         super().__init__(400, 50, 5)\n#         self.health = 10\n#         self.size = 100\n\n# 5. Add Animations\n# - Explosion effects\n# - Particle systems\n# - Smooth transitions\n\n# 6. Save High Scores\n# with open('highscores.txt', 'w') as f:\n#     f.write(str(high_score))\n\n# 7. Add Achievements\n# - 'Sharpshooter': 100% accuracy in a level\n# - 'Survivor': Complete level without losing life\n# - 'Speed Demon': Complete level in under 30 seconds",
      "followUp": "The sky's the limit! You have all the skills to create ANY game you imagine!",
      "options": [
        {
          "text": "I'm ready to create my own games!",
          "next": "lessonComplete"
        }
      ]
    },
    "lessonComplete": {
      "id": "lessonComplete",
      "speaker": "Pixel",
      "text": "ðŸŽŠðŸŽ® CONGRATULATIONS! YOU'VE COMPLETED ALL 10 LESSONS! ðŸŽ®ðŸŽŠ",
      "followUp": "You went from 'Hello World' to building a COMPLETE GAME! You're officially a Python Game Developer!",
      "additionalText": "You've learned: Variables, Math, Conditionals, Loops, Lists, Functions, Dictionaries, Classes, PyGame, and Game Development! That's EVERYTHING you need!",
      "action": "completeLesson",
      "actionParams": { "lesson": 10, "completed": true },
      "options": [
        {
          "text": "Start building my dream game!",
          "action": "startGameMode"
        },
        {
          "text": "Review any lesson",
          "action": "openLessons"
        },
        {
          "text": "Show me the game editor!",
          "action": "openWYSIWYGEditor"
        }
      ]
    }
  },
  "startNode": "start"
}