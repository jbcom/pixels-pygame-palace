import { useMemo } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Copy, Download, FileCode } from 'lucide-react';
import { cn } from '@/lib/utils';
import { PlacedComponent } from './pygame-wysiwyg-editor';
import { getComponentById } from '@/lib/pygame-components';
import { useToast } from '@/hooks/use-toast';

interface PygameEditorCodePanelProps {
  components: PlacedComponent[];
  className?: string;
}

export default function PygameEditorCodePanel({
  components,
  className
}: PygameEditorCodePanelProps) {
  const { toast } = useToast();

  const generatedCode = useMemo(() => {
    const lines: string[] = [
      '"""',
      'Generated by PyGame Visual Editor',
      'This code was created using the drag-and-drop interface',
      '"""',
      '',
      'import pygame',
      'import sys',
      '',
      '# Initialize Pygame',
      'pygame.init()',
      '',
      '# Set up the display',
      'SCREEN_WIDTH = 800',
      'SCREEN_HEIGHT = 600',
      'screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))',
      'pygame.display.set_caption("My PyGame Creation")',
      '',
      '# Define colors',
      'WHITE = (255, 255, 255)',
      'BLACK = (0, 0, 0)',
      '',
      '# Clock for controlling frame rate',
      'clock = pygame.time.Clock()',
      '',
      '# Game objects',
      'class GameObject:',
      '    def __init__(self, x, y, width, height, color):',
      '        self.rect = pygame.Rect(x, y, width, height)',
      '        self.color = color',
      '    ',
      '    def draw(self, surface):',
      '        pygame.draw.rect(surface, self.color, self.rect)',
      ''
    ];

    // Generate code for each component
    const componentVars: string[] = [];
    components.forEach((comp, index) => {
      const componentDef = getComponentById(comp.componentId);
      if (componentDef && componentDef.generateCode) {
        const varName = `${componentDef.type}_${index}`;
        componentVars.push(varName);
        const componentCode = componentDef.generateCode({
          ...comp.properties,
          x: comp.x,
          y: comp.y
        });
        lines.push(`# ${componentDef.name}`);
        lines.push(`${varName} = ${componentCode}`);
        lines.push('');
      }
    });

    // Add game loop
    lines.push('# Game loop');
    lines.push('running = True');
    lines.push('while running:');
    lines.push('    # Handle events');
    lines.push('    for event in pygame.event.get():');
    lines.push('        if event.type == pygame.QUIT:');
    lines.push('            running = False');
    lines.push('    ');
    lines.push('    # Clear screen');
    lines.push('    screen.fill(WHITE)');
    lines.push('    ');
    lines.push('    # Draw all objects');
    componentVars.forEach(varName => {
      lines.push(`    ${varName}.draw(screen)`);
    });
    lines.push('    ');
    lines.push('    # Update display');
    lines.push('    pygame.display.flip()');
    lines.push('    clock.tick(60)');
    lines.push('');
    lines.push('# Quit');
    lines.push('pygame.quit()');
    lines.push('sys.exit()');

    return lines.join('\n');
  }, [components]);

  const handleCopy = () => {
    navigator.clipboard.writeText(generatedCode);
    toast({
      title: "Code copied!",
      description: "The Python code has been copied to your clipboard.",
    });
  };

  const handleDownload = () => {
    const blob = new Blob([generatedCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'pygame_game.py';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Code downloaded!",
      description: "Your Python file has been downloaded.",
    });
  };

  return (
    <Card className={cn(
      "flex flex-col bg-gray-900 text-gray-100",
      className
    )}>
      <div className="flex items-center justify-between p-4 border-b border-gray-700">
        <div className="flex items-center gap-2">
          <FileCode className="w-5 h-5 text-purple-400" />
          <h3 className="font-bold text-lg">Generated Python Code</h3>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={handleCopy}
            className="gap-2 bg-gray-800 text-gray-100 border-gray-700 hover:bg-gray-700"
          >
            <Copy className="w-4 h-4" />
            Copy
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={handleDownload}
            className="gap-2 bg-gray-800 text-gray-100 border-gray-700 hover:bg-gray-700"
          >
            <Download className="w-4 h-4" />
            Download
          </Button>
        </div>
      </div>
      
      <ScrollArea className="flex-1 p-4">
        <pre className="text-sm font-mono">
          <code className="language-python">{generatedCode}</code>
        </pre>
      </ScrollArea>
    </Card>
  );
}